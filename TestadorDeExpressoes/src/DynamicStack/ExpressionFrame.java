/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package DynamicStack;

import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class ExpressionFrame extends javax.swing.JFrame {

    /**
     * Creates new form ExpressionFrame
     */
    public ExpressionFrame() {
        initComponents();
        txtExp.grabFocus();
        this.getRootPane().setDefaultButton(btnTest);
    }    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtExp = new javax.swing.JTextField();
        labelExp = new javax.swing.JLabel();
        btnTest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtExp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtExp.setText("{a+b*(c+[d-e])}");
        txtExp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtExpFocusGained(evt);
            }
        });

        labelExp.setText("Inserir expressão para ser testada:");

        btnTest.setText("Testar expressão");
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtExp)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelExp)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelExp)
                .addGap(3, 3, 3)
                .addComponent(txtExp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Stack<Character> expression_markers = new Stack();
    
    private void txtExpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExpFocusGained
        txtExp.selectAll();
    }//GEN-LAST:event_txtExpFocusGained

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        char[] expression = txtExp.getText().toCharArray();
        String response;
        int valid = this.is_valid(expression);
        if(valid == 0){
            response = "A expressão " + new String(expression) + " é válida.";
        }
        else{
            response = "<html><pre class='tab'>A expressão '" + new String(expression) +
                    "' não é valida.<br>" + String.format("%"+(13+valid)+"s", " ")
                    + "^</html>";
        }
        expression_markers.clear();
        JLabel label = new JLabel(response);
        label.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JOptionPane.showMessageDialog(null, label);
        txtExp.grabFocus();
    }//GEN-LAST:event_btnTestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExpressionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            ExpressionFrame frame = new ExpressionFrame();
            frame.setVisible(true);
            frame.setLocationRelativeTo(null); // center on screen
        });
    }
    
    private int is_valid(char[] expression){
        int i = -1;
        for(char ch:expression){
            i++;
            switch (ch) {
                case '{':
                case '[':
                case '(':
                    expression_markers.push(ch);
                    break;
                case ')':
                    if(expression_markers.is_empty() || 
                            expression_markers.top() != '(')
                        return (i==0? 1:i);
                    expression_markers.pop();
                    break;
                case ']':
                    if(expression_markers.is_empty() || 
                            expression_markers.top() != '[')
                        return (i==0? 1:i);
                    expression_markers.pop();
                    break;
                case '}':
                    if(expression_markers.is_empty() || 
                            expression_markers.top() != '{')
                        return (i==0? 1:i);
                    expression_markers.pop();
                    break;
                default:
                    break;
            }
        }
        return (expression_markers.is_empty())? 0:((i==0)? 1:i);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTest;
    private javax.swing.JLabel labelExp;
    private javax.swing.JTextField txtExp;
    // End of variables declaration//GEN-END:variables
}
